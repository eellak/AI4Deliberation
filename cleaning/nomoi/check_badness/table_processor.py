#!/usr/bin/env python3
"""
Python script to orchestrate table analysis and removal using the text_cleaner_rs Rust library.

Provides two main commands:
1. generate-report: Analyzes markdown files to find malformed tables and generates a 
                     detailed CSV report with their locations (file path, start line, end line).
2. remove-tables:   Reads a detailed CSV report (generated by 'generate-report') and 
                     processes markdown files to remove the specified tables, 
                     saving the modified files to a new directory.
"""

import argparse
import os
import sys
import time
import text_cleaner_rs # Assuming this is in PYTHONPATH or installed in venv
from pathlib import Path

def print_separator(char='-', length=80):
    """Print a visual separator line."""
    print(char * length)

def run_generate_detailed_table_report(input_dir_str: str, output_csv_str: str, num_threads: int):
    """
    Generates a detailed CSV report of malformed tables with line numbers.
    """
    input_dir_abs = os.path.abspath(input_dir_str)
    output_csv_abs = os.path.abspath(output_csv_str)
    Path(output_csv_abs).parent.mkdir(parents=True, exist_ok=True)
    
    print(f"Input directory: {input_dir_abs}")
    print(f"Output CSV: {output_csv_abs}")
    print(f"Threads: {num_threads if num_threads > 0 else 'Rayon default'}")
    print_separator(char='.')
    
    start_time = time.time()
    try:
        text_cleaner_rs.batch_generate_detailed_table_report_csv(
            input_dir_abs,
            output_csv_abs,
            num_threads
        )
        print(f"Detailed table report generated successfully: {output_csv_abs}")
    except Exception as e:
        print(f"Error in run_generate_detailed_table_report: {e}")
        raise
    finally:
        elapsed_time = time.time() - start_time
        print(f"Detailed report generation finished in {elapsed_time:.2f} seconds.")
    
    return {"detailed_report_csv_path": output_csv_abs}

def run_remove_tables(input_dir_md_str: str, report_csv_str: str, output_dir_final_md_str: str, num_threads: int):
    """
    Removes malformed tables from markdown files based on a detailed report.
    """
    input_dir_md_abs = os.path.abspath(input_dir_md_str)
    report_csv_abs = os.path.abspath(report_csv_str)
    output_dir_final_md_abs = os.path.abspath(output_dir_final_md_str)
    Path(output_dir_final_md_abs).mkdir(parents=True, exist_ok=True)

    if not Path(report_csv_abs).is_file():
        error_msg = f"Error: Report CSV file not found: {report_csv_abs}"
        print(error_msg)
        raise FileNotFoundError(error_msg)

    print(f"Input directory (original files): {input_dir_md_abs}")
    print(f"Report CSV: {report_csv_abs}")
    print(f"Output directory (processed files): {output_dir_final_md_abs}")
    print(f"Threads: {num_threads if num_threads > 0 else 'Rayon default'}")
    print_separator(char='.')

    start_time = time.time()
    try:
        text_cleaner_rs.batch_remove_tables_from_files(
            input_dir_md_abs,
            report_csv_abs,
            output_dir_final_md_abs,
            num_threads
        )
        print(f"Table removal process completed. Output saved to: {output_dir_final_md_abs}")
    except Exception as e:
        print(f"Error in run_remove_tables: {e}")
        raise
    finally:
        elapsed_time = time.time() - start_time
        print(f"Table removal finished in {elapsed_time:.2f} seconds.")

    return {"cleaned_output_dir": output_dir_final_md_abs}

def main():
    parser = argparse.ArgumentParser(
        description="Process markdown files for table analysis and removal using Rust backend.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    subparsers = parser.add_subparsers(dest='command', required=True, title='commands',
                                       help='Run `%(prog)s {command} --help` for more information on a command.')

    # --- Sub-parser for generate-report ---
    parser_generate = subparsers.add_parser(
        'generate-report', 
        help='Generate a detailed CSV report of malformed tables with line numbers.',
        description='Analyzes all markdown (.md) files in the input directory, identifies malformed tables, and outputs a CSV file detailing each instance with its file path, issue description, and 0-indexed start and end line numbers of the table block.'
    )
    parser_generate.add_argument('--input-dir', required=True, type=str, help='Input directory containing markdown files to analyze.')
    parser_generate.add_argument('--output-csv', required=True, type=str, help='Path to save the detailed CSV report. Example: detailed_table_report.csv')
    parser_generate.add_argument('--threads', type=int, default=0, help='Number of threads for processing (0 = Rayon default).')

    # --- Sub-parser for remove-tables ---
    parser_remove = subparsers.add_parser(
        'remove-tables', 
        help='Remove malformed tables from markdown files based on a detailed report.',
        description='Reads a CSV report (typically generated by the `generate-report` command) that specifies malformed tables and their line numbers. Processes markdown files from an input directory, removes these tables (replacing them with \'<!-- table-removed -->\'), and saves the modified files to an output directory, maintaining the original file structure.'
    )
    parser_remove.add_argument('--input-dir', required=True, type=str, help='Input directory containing the original markdown files (should be the same as used for generate-report).')
    parser_remove.add_argument('--report-csv', required=True, type=str, help='Path to the detailed CSV report generated by the `generate-report` command.')
    parser_remove.add_argument('--output-dir', required=True, type=str, help='Output directory to save markdown files after table removal.')
    parser_remove.add_argument('--threads', type=int, default=0, help='Number of threads for processing (0 = Rayon default).')

    args = parser.parse_args()

    print_separator()
    print(f"Executing command: {args.command}")
    
    try:
        if args.command == 'generate-report':
            run_generate_detailed_table_report(
                args.input_dir,
                args.output_csv,
                args.threads
            )
        elif args.command == 'remove-tables':
            run_remove_tables(
                args.input_dir,
                args.report_csv,
                args.output_dir,
                args.threads
            )
    except Exception as e:
        print_separator(char='!')
        # The specific functions already print their errors, so just indicate overall failure.
        print(f"Command '{args.command}' failed.") 
        print_separator(char='!')
        sys.exit(1)
    finally:
        # Overall timing is less relevant here as individual functions print theirs.
        # If needed, could sum them up or pass start_time around.
        print_separator()
        print(f"Command '{args.command}' CLI wrapper finished.")
        print_separator()

if __name__ == "__main__":
    main() 