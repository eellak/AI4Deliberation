"""Prompt templates & retry-handling utilities.
Focuses on Stage 1–3 without 2.4–2.6 re-join logic.
"""
from __future__ import annotations

from dataclasses import dataclass
from typing import Dict

# ---------------------------------------------------------------------------
# RAW PROMPT TEMPLATES (GREEK)
# ---------------------------------------------------------------------------
STAGE1_PROMPT = (
    "Παρακαλώ δημιουργήστε μια σύντομη περίληψη του παρακάτω κειμένου στα Ελληνικά, σε απλή γλώσσα, "
    "κατάλληλη για πολίτες χωρίς εξειδικευμένες νομικές γνώσεις. Η περίληψη πρέπει να είναι έως 3 προτάσεις.\n"
    "Προσοχή να μη παραλειφθούν αλλαγές σε νόμους, θεσμούς, ή διαδικασίες αν πρόκειται για νομοθετικό άρθρο.\n"
    "Οι περιλήψεις πρέπει να είναι όσο πιο σύντομες γίνεται, διατηρώντας την ουσία του κειμένου και να μην υπερβαίνουν τις 3 προτάσεις.\n"
    "Σκοπός είναι η κατανόηση του περιεχομένου σε μια πλατφόρμα ηλεκτρονικής διαβούλευσης – μην προσθέτετε εισαγωγική φράση, απλώς γράψτε την περίληψη:"
)

STAGE2_COHESIVE_PROMPT = (
    "Οι παρακάτω είναι ατομικές περιλήψεις πολλαπλών άρθρων από μία ενιαία διαβούλευση. "
    "Παρακαλώ συνδυάστε τις σε ένα ενιαίο, συνεκτικό και περιεκτικό κείμενο στα Ελληνικά που να αποτυπώνει τα κύρια σημεία και τον ευρύτερο στόχο του νομοσχεδίου.\n"
    "Χρησιμοποιήστε απλή, μη τεχνική γλώσσα ώστε να γίνεται κατανοητό από το γενικό κοινό.\n"
    "Στοχεύστε σε περίπου 350–400 λέξεις συνολικά οργανωμένες σε 6–7 μικρές παραγράφους."
)

STAGE2_THEMES_PROMPT = (
    "Αξιοποιώντας τις περιλήψεις των άρθρων που ακολουθούν, καταγράψτε τα κύρια θέματα (π.χ. φορολογία, εργασιακά, προστασία δεδομένων) που επηρεάζουν τους πολίτες.\n"
    "Παρουσιάστε τα σε μορφή λίστας κουκίδων. Για κάθε θέμα δώστε μία σύντομη πρόταση που εξηγεί τον τρόπο με τον οποίο επηρεάζονται οι πολίτες.\n"
    "Χρησιμοποιήστε σαφή και απλή διατύπωση χωρίς νομική ορολογία."
)

STAGE2_PLAN_PROMPT = (
    "Με βάση τις παραπάνω περιλήψεις, σκιαγραφήστε ένα ΣΧΕΔΙΟ ΑΦΗΓΗΣΗΣ με 6–7 ενότητες.\n"
    "Κάθε ενότητα πρέπει να έχει: (α) έναν σύντομο περιγραφικό ΤΙΤΛΟ και (β) 1–2 προτάσεις περιγραφής.\n"
    "Ακολουθήστε δομή Αρχή – Μέση – Τέλος ώστε να διευκολύνεται η κατανόηση της συνολικής ιστορίας του νομοσχεδίου από τον αναγνώστη."
)

STAGE3_EXPOSITION_PROMPT = (
    "Χρησιμοποιώντας (1) τη Συνολική Περίληψη, (2) τα Κύρια Θέματα και (3) το Σχέδιο Αφήγησης, συνθέστε ένα ουδέτερο και ενημερωτικό κείμενο στα Ελληνικά.\n"
    "Το κείμενο θα αποτελέσει ενημερωτικό άρθρο για πολίτες χωρίς νομικές γνώσεις, οπότε απαιτείται απλή γλώσσα και σαφής ροή.\n"
    "Μήκος στόχος: ~600 λέξεις, κατανεμημένες σε λογικές παραγράφους που ακολουθούν το σχέδιο αφήγησης.\n"
    "Αποφύγετε jargon και προσωπικά σχόλια· διατηρήστε ουδέτερο τόνο."
)

CONCISE_CONTINUATION_PROMPT = (
    "Η απάντησή σας διακόπηκε. Ολοκληρώστε άμεσα την τελευταία πρόταση με ελάχιστες λέξεις:"
)

SHORTENING_CORRECTION_PROMPT = (
    "Η περίληψη είναι υπερβολικά μεγάλη ή ατελής. Δημιουργήστε μια νέα, συντομότερη περίληψη, επικεντρωμένη στα κυριότερα σημεία:"
)

# ---------------------------------------------------------------------------
# PUBLIC REGISTRY & FACTORY
# ---------------------------------------------------------------------------
PROMPTS: Dict[str, str] = {
    "stage1_article": STAGE1_PROMPT,
    "stage2_cohesive": STAGE2_COHESIVE_PROMPT,
    "stage2_themes": STAGE2_THEMES_PROMPT,
    "stage2_plan": STAGE2_PLAN_PROMPT,
    "stage3_exposition": STAGE3_EXPOSITION_PROMPT,
    "concise_continuation": CONCISE_CONTINUATION_PROMPT,
    "shortening_correction": SHORTENING_CORRECTION_PROMPT,
}

def get_prompt(key: str) -> str:
    """Return prompt text; raises KeyError if not found."""
    return PROMPTS[key]

__all__ = list(PROMPTS.keys()) + [
    "PROMPTS",
    "get_prompt",
]

# NOTE: Retry logic moved to `retry.py` to decouple generation heuristics from templates.
